/*
 Generated by typeshare 1.13.2
*/

export enum DContentItemType {
	File = "file",
	Terminal = "terminal",
	Settings = "settings",
}

export interface DContentItemRef {
	type: DContentItemType;
	document_file_path?: string;
}

export interface DTab {
	id: string;
	title: string;
	is_selected: boolean;
	content_item_refs: DContentItemRef[];
}

export enum DDocumentStatus {
	New = "new",
	SavedToFs = "saved-to-fs",
	Modified = "modified",
}

export interface DDocument {
	title: string;
	file_path: string;
	buffer: string;
	status: DDocumentStatus;
}

export interface DContentItem {
	type: DContentItemType;
	document?: DDocument;
}

export interface DWindowContent {
	content_items: DContentItem[];
}

export interface DFileTreeNode {
	id: string;
	name: string;
	is_expanded?: boolean;
	children: string[];
	level: number;
}

export enum DSidebarType {
	Tree = "tree",
	Tabs = "tabs",
}

export interface DInterface {
	is_overlay_active: boolean;
	sidebar: DSidebarType;
}

export interface DWindowState {
	id: string;
	tabs: DTab[];
	content: DWindowContent;
	file_path: string;
	file_list: DFileTreeNode[];
	ui: DInterface;
}

export interface DAppState {
	windows: Record<string, DWindowState>;
}

export enum DWindowEventScope {
	All = "All",
	FileList = "FileList",
	Tabs = "Tabs",
	Content = "Content",
}

export interface DWindowEventPayload {
	scope: DWindowEventScope;
}

export interface DWindowEventPayloadAll {
	scope: DWindowEventScope;
	window_state: DWindowState;
}

export interface DWindowEventPayloadContent {
	scope: DWindowEventScope;
	content: DWindowContent;
}

export interface DWindowEventPayloadFileList {
	scope: DWindowEventScope;
	file_list: DFileTreeNode[];
}

export interface DWindowEventPayloadTabs {
	scope: DWindowEventScope;
	tabs: DTab[];
}

